<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AuthenticationPassed" xml:space="preserve">
    <value>验证通过</value>
  </data>
  <data name="ConcurrencyFailure" xml:space="preserve">
    <value>并发错误，对象已被修改！</value>
  </data>
  <data name="DefaultError" xml:space="preserve">
    <value>未知错误！</value>
  </data>
  <data name="DuplicateEmail" xml:space="preserve">
    <value>邮箱 '{0}' 已经存在！</value>
  </data>
  <data name="DuplicateRoleName" xml:space="preserve">
    <value>角色名 '{0}' 已经存在！</value>
  </data>
  <data name="DuplicateUserName" xml:space="preserve">
    <value>用户名 '{0}' 已存在！</value>
  </data>
  <data name="EmailIsNull" xml:space="preserve">
    <value>Email不能为空</value>
  </data>
  <data name="InitializeFail" xml:space="preserve">
    <value>初始化错误</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>邮箱 '{0}' 格式错误！</value>
  </data>
  <data name="InvalidRole" xml:space="preserve">
    <value>角色错误</value>
  </data>
  <data name="InvalidRoleName" xml:space="preserve">
    <value>角色 '{0}' 验证错误！</value>
  </data>
  <data name="InvalidToken" xml:space="preserve">
    <value>令牌无效</value>
  </data>
  <data name="InvalidUserName" xml:space="preserve">
    <value>用户名 '{0}' 错误，只可以包含数字和字母！</value>
  </data>
  <data name="LoginAlreadyAssociated" xml:space="preserve">
    <value>当前用户已经登录！</value>
  </data>
  <data name="NotAllowedNull" xml:space="preserve">
    <value>'{0}'不能为 null 或空。</value>
  </data>
  <data name="PasswordChanged" xml:space="preserve">
    <value>密码修改成功</value>
  </data>
  <data name="PasswordIsNotChanged" xml:space="preserve">
    <value>密码修改失败</value>
  </data>
  <data name="PasswordMismatch" xml:space="preserve">
    <value>密码错误！</value>
  </data>
  <data name="PasswordRequiresDigit" xml:space="preserve">
    <value>密码至少有一个数字 ('0'-'9').</value>
  </data>
  <data name="PasswordRequiresLower" xml:space="preserve">
    <value>密码必须包含小写字母 ('a'-'z').</value>
  </data>
  <data name="PasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>密码必须至少有一个非字母数字字符.</value>
  </data>
  <data name="PasswordRequiresUpper" xml:space="preserve">
    <value>密码必须包含大写字母 ('A'-'Z').</value>
  </data>
  <data name="PasswordTooShort" xml:space="preserve">
    <value>密码最小长度应当为 {0} ！</value>
  </data>
  <data name="RequiresPassword" xml:space="preserve">
    <value>需要密码</value>
  </data>
  <data name="RequiresUserNameOrEmail" xml:space="preserve">
    <value>需要'用户名'或'Email'之一</value>
  </data>
  <data name="RoleCreated" xml:space="preserve">
    <value>新增角色 '{0}'成功</value>
  </data>
  <data name="RoleCreateFail" xml:space="preserve">
    <value>新增角色失败</value>
  </data>
  <data name="UserAlreadyHasPassword" xml:space="preserve">
    <value>用户已经设置了密码.</value>
  </data>
  <data name="UserAlreadyInRole" xml:space="preserve">
    <value>用户已已有角色 '{0}' 权限.</value>
  </data>
  <data name="UserCreated" xml:space="preserve">
    <value>新增用户'{0}'成功</value>
  </data>
  <data name="UserCreateFail" xml:space="preserve">
    <value>新增用户失败</value>
  </data>
  <data name="UserDoseNotExit" xml:space="preserve">
    <value>用户不存在</value>
  </data>
  <data name="UserLockoutNotEnabled" xml:space="preserve">
    <value>未为此用户启用锁定.</value>
  </data>
  <data name="UserNameIsNull" xml:space="preserve">
    <value>用户名不能为空</value>
  </data>
  <data name="UserNotInRole" xml:space="preserve">
    <value>用户没有角色 '{0}' 权限.</value>
  </data>
</root>